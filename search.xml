<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Arch Linux shell配置问题</title>
    <url>/blog/1105369576.html</url>
    <content><![CDATA[<h2 id="Zsh的卸载问题"><a href="#Zsh的卸载问题" class="headerlink" title="Zsh的卸载问题"></a><code>Zsh</code>的卸载问题</h2><blockquote>
<p>不知道是不是通病，之前在使用<code>manjaro</code>的时候，也是在出现了某次重启后所有用户都无法登录到桌面，ssh也连接不上，当时没有考虑到zsh的问题，直接拔盘备份重装成<code>Arch Linux</code>了，近期使用发现<code>zsh</code>输入中文状态异常，一番调试无果，直接卸载<code>zsh</code>，之后安装<code>starship</code>完成配置并重启，又遇到同样问题，特此记录</p>
</blockquote>
<ul>
<li>如果在卸载后已经无法登录到系统了，直接进入单用户模式，替换修改<code>/etc/passwd</code>&#x2F;下的<code>Zsh</code>为<code>bash</code>即可</li>
<li>单用户模式进入方式<br>  系统引导时，选中引导项，按<code>e</code>在<code>quiet</code>字符后追加<code>init=/bin/bash</code> ，然后<code>Ctrl+X</code>直接引导即可进入单用户模式，按照之前教程直接修改<code>/etc/passwd</code>内容即可</li>
<li>完成修改后<code>reboot -f</code>强制重启即可</li>
</ul>
<h2 id="Starship安装配置"><a href="#Starship安装配置" class="headerlink" title="Starship安装配置"></a><code>Starship</code>安装配置</h2><ul>
<li><code>Starship</code>的安装配置比较简单，官网有各个系统的安装方式，不展开叙述了</li>
</ul>
<h2 id="locale-a报错问题"><a href="#locale-a报错问题" class="headerlink" title="locale -a报错问题"></a><code>locale -a</code>报错问题</h2><blockquote>
<p>最后在安装完成<code>starship</code>时，发现本地化配置还是失败，查看<code>wiki</code>未果，最后发现少了一个<code>glibc locale</code>库，补全即可</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
        <tag>linux</tag>
        <tag>starship</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>neovim简单配置</title>
    <url>/blog/22379729.html</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## `Neovim`的安装</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>neovim</code>在各大发行版都有对应的包提供，可以通过对应发行版的包管理器直接安装</p>
</blockquote>
<ul>
<li>neovim安装完成之后可以设置<code>alias</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ArchLinux </span><br><span class="line">vim /etc/profile</span><br><span class="line">#add alias </span><br><span class="line">alisa vim=&#x27;nvim&#x27;</span><br><span class="line">#刷新配置接口</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Neovim插件配置"><a href="#Neovim插件配置" class="headerlink" title="Neovim插件配置"></a><code>Neovim</code>插件配置</h2><blockquote>
<p><code>neovim</code>的配置文件在<code>~/.config/nvim</code>下，默认情况会直接读取<code>~/.config/vim/init.lua</code>,建议手动划分不同的目录和文件来分开各类配置管理<br><a href="https://github.com/Jokerstep/nvim">我的配置文件</a></p>
</blockquote>
<ul>
<li>目录结构如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nvim</span><br><span class="line">├── colorscheme.lua          #手动创建文件，需要声明主题信息</span><br><span class="line">├── init.lua                 #手动创建文件，相当于管理各类lua文件的入口</span><br><span class="line">├── lua                      #手动创建文件，存放各类lua文件</span><br><span class="line">│   ├── config                   #手动创建文件夹</span><br><span class="line">│   │    └── nvim-cmp.lua         #手动创建文件</span><br><span class="line">│   ├── keymaps.lua          #手动创建文件，声明keymap</span><br><span class="line">│   ├── options.lua          #手动创建，声明配置</span><br><span class="line">│   └── plugins.lua          #手动创建，管理插件安装</span><br><span class="line">└── plugin                   #自动创建 </span><br><span class="line">    └── packer_compiled.lua</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用git进行管理，多平台同步"><a href="#使用git进行管理，多平台同步" class="headerlink" title="使用git进行管理，多平台同步"></a>使用<code>git</code>进行管理，多平台同步</h2><blockquote>
<p>配置文件在不用的操作系统存放路径不一致，可以采用git来同步</p>
</blockquote>
<h3 id="windows下的配置文件存放路径"><a href="#windows下的配置文件存放路径" class="headerlink" title="windows下的配置文件存放路径"></a><code>windows</code>下的配置文件存放路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\&lt;username&gt;\AppData\Local\nvim</span><br></pre></td></tr></table></figure>

<h3 id="linux下的配置文件存放路径"><a href="#linux下的配置文件存放路径" class="headerlink" title="linux下的配置文件存放路径"></a><code>linux</code>下的配置文件存放路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.confg/nvim</span><br></pre></td></tr></table></figure>


<p>初次导入后，插件需要下载，稍微等待几分钟即可，需要特殊的网络环境，插件都是从github上拉取的</p>
]]></content>
      <categories>
        <category>neovim</category>
      </categories>
      <tags>
        <tag>neovim</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows创建硬链接和符号链接</title>
    <url>/blog/1546836959.html</url>
    <content><![CDATA[<h2 id="两种形式的文件链接特性"><a href="#两种形式的文件链接特性" class="headerlink" title="两种形式的文件链接特性"></a>两种形式的文件链接特性</h2><h3 id="符号链接"><a href="#符号链接" class="headerlink" title="符号链接"></a>符号链接</h3><blockquote>
<p>符号链接则是将自己链接到一个目标文件或目录的路径上。当系统识别到符号链接时，它会跳转到符号链接所指向的目标中去，而不改变此时的文件路径。</p>
</blockquote>
<ul>
<li>使用方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Item &quot;引用名称&quot; -ItemType SymbolicLink -Target &quot;绝对路径&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>符号链接像一个虫洞：当用户或应用要访问此虫洞时，就会被传送到符号链接所指向的地方，<strong>但他们是通过虫洞访问此目标的</strong>，所以其路径仍是虫洞自己的路径，这是它和快捷方式在效果上的区别所在。</p>
</blockquote>
</li>
</ul>
<p>符号链接具有以下特性：</p>
<ul>
<li>**只需要一个路径</li>
<li>**创建时，它的目标可以是本地的、远程的任何文件或目录，即使目标不存在。</li>
<li><strong>所做的一切更改都会反映在目标上</strong>。因为打开符号链接，就是打开了目标。复制符号链接，会复制目标的内容。</li>
<li>移动符号链接，则会移动链接本身。</li>
<li>更改目标的名称，移动目标的位置，符号链接将会成为死链，因为它无法通过设定的路径找到目标。</li>
<li>更改符号链接本身的名称和位置，目标不受影响。</li>
<li>当目标被删除时，符号链接继续存在，但会成为死链，无法打开。</li>
<li>当符号链接被删除时，它指向的目标不受影响。</li>
</ul>
<h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><blockquote>
<p>硬链接和符号链接的原理完全不同，符号链接是指向目标路径的链接，而硬链接则是指向目标数据对象的链接。因为一个卷中的数据对象都有一个独一无二文件 ID，也可以说硬链接是指向目标文件 ID 的链接。</p>
</blockquote>
<ul>
<li>使用方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">New-Item &quot;引用名称&quot; -ItemType HardLink -Target &quot;绝对路径&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>硬链接具有以下特性：</p>
<ul>
<li><strong>硬链接可以看作是一个既有文件的别名</strong></li>
<li>创建时，它必须指向本地的同一个卷内存在的文件，在 C 盘创建硬链接只能指向 C 盘存在的文件。</li>
<li>打开硬链接，所做的一切更改都会反映在目标文件上。因为目标文件也链接着被更改的数据。</li>
<li>更改目标文件的名称、位置，硬链接不会受到影响。更改硬链接的名称、位置，目标文件不受影响，链接不会断开。</li>
<li>当目标被删除时，硬链接继续存在，且可以正常打开、编辑。因为他具备一个完整的文件结构。</li>
<li>当硬链接被删除时，目标文件继续存在，不受影响。</li>
</ul>
<h2 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h2><h3 id="使用git来管理本地配置文件，且配置文件无法移动的情况"><a href="#使用git来管理本地配置文件，且配置文件无法移动的情况" class="headerlink" title="使用git来管理本地配置文件，且配置文件无法移动的情况"></a>使用<code>git</code>来管理本地配置文件，且配置文件无法移动的情况</h3><blockquote>
<p>windows本地的<code>$PROFILE</code>文件，可以使用硬链接到某个git仓库，这样在原有的<code>$PROFILE</code>所做的所有配置可以直接同步到对应仓库</p>
</blockquote>
<h3 id="使用OneDrive备份软件数据"><a href="#使用OneDrive备份软件数据" class="headerlink" title="使用OneDrive备份软件数据"></a>使用<code>OneDrive</code>备份软件数据</h3><blockquote>
<p><code>OneDrive</code>可以直接创建一个管理目录来存放软件数据：比如<code>QQ</code>、<code>wechat</code>等软件的聊天记录，提前在<code>OneDrive</code>中创建目录，再到应用目录中创建链接即可</p>
</blockquote>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Github图床</title>
    <url>/blog/3495.html</url>
    <content><![CDATA[<h2 id="Github搭建图床"><a href="#Github搭建图床" class="headerlink" title="Github搭建图床"></a><code>Github</code>搭建图床</h2><h3 id="创建新的Github仓库"><a href="#创建新的Github仓库" class="headerlink" title="创建新的Github仓库"></a>创建新的<code>Github</code>仓库</h3><ul>
<li><p>在<code>Github</code>中创建一个新的仓库<br><img src="https://cdn.jsdelivr.net/gh/Jokerstep/picgo@main/imgs/202311161009471.png" alt="image.png"></p>
</li>
<li><p>填写好仓库名，将仓库状态调整为<code>public</code>，然后直接创建<br><img src="https://cdn.jsdelivr.net/gh/Jokerstep/picgo@main/imgs/202311161011841.png" alt="image.png"></p>
</li>
</ul>
<hr>
<h3 id="生成Github的token令牌"><a href="#生成Github的token令牌" class="headerlink" title="生成Github的token令牌"></a>生成<code>Github</code>的<code>token</code>令牌</h3><ul>
<li><p>完成仓库创建后，需要设定<code>token</code>，在<code>Github</code>页面点击右上角头像，选择设置进入<br><img src="https://cdn.jsdelivr.net/gh/Jokerstep/picgo@main/imgs/202311161013071.png" alt="image.png"></p>
</li>
<li><p>页面左边栏，<code>Developer settings</code>,选择<code>Tokens(classic)</code><br><img src="https://cdn.jsdelivr.net/gh/Jokerstep/picgo@main/imgs/202311161015511.png" alt="image.png"></p>
</li>
<li><p>生成一个新的<code>token</code>，并调整过期时间，将<code>repo</code>权限全部勾选，然后直接创建<br>  创建的<code>token</code>请妥善保管，页面关闭后就看不见了<br><img src="https://cdn.jsdelivr.net/gh/Jokerstep/picgo@main/imgs/202311161017016.png" alt="image.png"></p>
</li>
</ul>
<hr>
<h2 id="使用PicoGo上传图片"><a href="#使用PicoGo上传图片" class="headerlink" title="使用PicoGo上传图片"></a>使用<code>PicoGo</code>上传图片</h2><h3 id="PicGo安装"><a href="#PicGo安装" class="headerlink" title="PicGo安装"></a><code>PicGo</code>安装</h3><ul>
<li><code>PicGo</code>的安装有多种方式，此教程采用scoop包管理器安装<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install picgo</span><br></pre></td></tr></table></figure></li>
<li>也可以通过<code>npm</code>，或者是<code>picgo</code>的<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">官网</a>下载安装包安装</li>
</ul>
<hr>
<h4 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a><code>PicGo</code>配置</h4><ul>
<li><code>Picgo</code>安装完成后，打开软件的<code>图床设置</code>，找到<code>Github</code><br><img src="https://cdn.jsdelivr.net/gh/Jokerstep/picgo@main/imgs/202311161027739.png" alt="image.png"><ul>
<li><code>设定仓库名</code>填写你的<code> &lt;username&gt;/&lt;repository name&gt;</code></li>
<li><code>设定分支名</code>填写你的主分支名</li>
<li><code>设定Token</code>填写在生成的<code>token</code></li>
<li><code>设定存储路径</code>填写任意名称</li>
<li><code>设定自定义域名</code>可以选择一个加速域名来作为自定义域名，推荐<code>https://cdn.jsdelivr.net/gh/</code>,在此链接后添加<code>&lt;username&gt;/&lt;repository name&gt;@&lt;branch name&gt;</code></li>
<li>最后设置为默认图床即可</li>
</ul>
</li>
</ul>
<hr>
<h3 id="Picgo上传"><a href="#Picgo上传" class="headerlink" title="Picgo上传"></a><code>Picgo</code>上传</h3><ul>
<li>使用软件的默认上传比较简单，直接拖拽到<code>Picgo</code>界面即可</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>github</tag>
        <tag>图床</tag>
        <tag>picgo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo主题应用</title>
    <url>/blog/49162.html</url>
    <content><![CDATA[<h2 id="Hexo主题next的安装"><a href="#Hexo主题next的安装" class="headerlink" title="Hexo主题next的安装"></a><code>Hexo</code>主题<code>next</code>的安装</h2><h3 id="next主题的下载"><a href="#next主题的下载" class="headerlink" title="next主题的下载"></a><code>next</code>主题的下载</h3><blockquote>
<p>需要区分<code>主题配置文件</code>和<code>本地仓库配置文件</code>,<code>主题配置文件</code>存放在<code>theme/’主题名‘/_config.yml</code>,<code>本地仓库配置文件</code>存放在<code>hexo init</code>的根路径下</p>
</blockquote>
<ul>
<li>github上搜索<code>hexo</code>的<code>next</code>主题，使用<code>git clone</code>仓库文件到本地主题文件夹下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next.git /xx/hexo/theme/next</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="next主题配置修改"><a href="#next主题配置修改" class="headerlink" title="next主题配置修改"></a><code>next</code>主题配置修改</h3><ul>
<li>防止后续<code>next</code>主题升级时导致配置被覆盖，该主题可以应用可以在本地仓库根目录新建一个配置文件,以下命令均在<code>hexo init</code>目录下执行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /xx/hexo/theme/next/_config.yml ./_config.next.yml</span><br></pre></td></tr></table></figure></li>
<li>后续的所有针对配置文件的修改，都改动本地仓库根目录下的<code>_config.next.html</code></li>
</ul>
<hr>
<h3 id="next主题应用"><a href="#next主题应用" class="headerlink" title="next主题应用"></a><code>next</code>主题应用</h3><ul>
<li>首先修改本地仓库根目录下的<code>_config.yml</code><blockquote>
<p>按照<code>hexo</code>的配置文档，填写好<code># Extensions</code>配置块下的<code>theme</code>参数</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li>
<li>再次<code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 刷新缓存，生成静态页面* ，在本地预览</li>
</ul>
<hr>
<h2 id="next主题的自定义（对-config-next-yml的修改）"><a href="#next主题的自定义（对-config-next-yml的修改）" class="headerlink" title="next主题的自定义（对_config.next.yml的修改）"></a><code>next</code>主题的自定义（对_config.next.yml的修改）</h2><h3 id="主题样式配置"><a href="#主题样式配置" class="headerlink" title="主题样式配置"></a>主题样式配置</h3><ul>
<li><code>next</code>主题内置了四个样式，本教程选用<code>Gemini</code>样式，修改<code># Schemes</code>配置块，注释其他scheme，取消注释<code>Gemini</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="站点图标配置"><a href="#站点图标配置" class="headerlink" title="站点图标配置"></a>站点图标配置</h3><ul>
<li>修改<code>favicon</code>配置块,此处的图片可以是<code>url链接</code>，也可以在本地仓库的<code>source</code>目录下新建<code>images</code>文件夹存放<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">	<span class="attr">small:</span> <span class="string">/images/favicon-16x16.png</span></span><br><span class="line">	<span class="attr">medium:</span> <span class="string">/images/favicon-32x32.png</span></span><br><span class="line">	<span class="attr">apple_touch_icon:</span> <span class="string">/images/apple_touch_icon.png</span></span><br><span class="line">	<span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">custom_logo:</span> <span class="string">/images/custom-logo.png</span> <span class="comment">#此处配置的是站点名称下方显示的图片</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h3><ul>
<li>修改<code>menu</code>配置块<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">	<span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">	<span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">	<span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">	<span class="comment">#其他菜单按需自行配置</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="站点头像配置"><a href="#站点头像配置" class="headerlink" title="站点头像配置"></a>站点头像配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">avater：</span></span><br><span class="line">	<span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">	<span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">	<span class="comment">#布尔值，设置是否圆形显示</span></span><br><span class="line">	<span class="attr">rotated:</span> <span class="literal">false</span></span><br><span class="line">	<span class="comment">#布尔值，设置是否旋转显示</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>至此主题的简单修改就完成了</p>
</blockquote>
<h2 id="站点部署"><a href="#站点部署" class="headerlink" title="站点部署"></a>站点部署</h2><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><ul>
<li>依据<code>menu</code>的配置块来新建所需要的页面<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n page &quot;home&quot;</span><br><span class="line">hexo n page &quot;tags&quot;</span><br><span class="line">hexo n page &quot;categories&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h3><ul>
<li>完成所有配置后，通过hexo直接发布到github<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean #清理缓存</span><br><span class="line">hexo g     #生成静态页面</span><br><span class="line">hexo s     #预览站点</span><br><span class="line">hexo d     #发布到github</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="同步博客"><a href="#同步博客" class="headerlink" title="同步博客"></a>同步博客</h3><ul>
<li><code>hexo</code>在发布后，可以不用保持后台在线，所有文章管理可以在其他<code>markdown</code>编辑中编辑<blockquote>
<p>需要注意新建的文件需要注明属性:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">  - </span><br><span class="line">date: </span><br><span class="line">tags:</span><br><span class="line">  - </span><br><span class="line">  - </span><br><span class="line">  - </span><br><span class="line">categirues:</span><br><span class="line">  - </span><br><span class="line">description: </span><br><span class="line">--- </span><br></pre></td></tr></table></figure></li>
</ul>
<p>此后新建的文件可以直接通过scp上传到目标主机的<code>/xxx/hexo/source/_pose</code>目录下，本地预览无问题后直接发布到<code>GitHub</code>即可</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo基础环境搭建</title>
    <url>/blog/16864.html</url>
    <content><![CDATA[<h2 id="利用Github-Pages-Hexo-搭建博客系统"><a href="#利用Github-Pages-Hexo-搭建博客系统" class="headerlink" title="利用Github Pages&amp;Hexo 搭建博客系统"></a>利用<code>Github Pages</code>&amp;<code>Hexo</code> 搭建博客系统</h2><h3 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a><code>Github Pages</code>设置</h3><ul>
<li>在<code>Github</code>中创建一个新的<code>Repository</code>，命名为 <code>&lt;username&gt;.github.io</code>,<code>&lt;username&gt;</code>为Github的用户名</li>
<li>使用<code>git</code>链接到对应<code>Repository</code>，新建一个<code>分支</code>用于存放静态文件<blockquote>
<p>注意当前仓库使用的分支是否正确，下文中使用的<code>hexo d</code>命令会自动推送到<code>master</code>分支，可手动切换<code>master</code>为默认分支</p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="npm环境设置"><a href="#npm环境设置" class="headerlink" title="npm环境设置"></a><code>npm</code>环境设置</h3><ul>
<li>当前在<code>Archlinux</code>下搭建npm环境   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#配置npm淘宝源</span><br><span class="line">npm config set registry https://registry.npmmirror.com/</span><br><span class="line">#更新package</span><br><span class="line">npm update</span><br><span class="line">#安装hexo-cli</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="Hexo环境设置"><a href="#Hexo环境设置" class="headerlink" title="Hexo环境设置"></a><code>Hexo</code>环境设置</h3><ul>
<li>完成<code>Hexo</code>安装后，在主机新建<code>Hexo</code>博客项目  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#新建目录</span><br><span class="line">mkdir -p ./hexo</span><br><span class="line">#切换到hexo目录</span><br><span class="line">cd ./hexo</span><br><span class="line">#初始化该目录</span><br><span class="line">hexo init ./</span><br><span class="line">#安装package.json下的依赖包</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li>配置Hexo博客的基本信息，修改<code>hexo</code>目录下的<code>_config.yml</code>文件，按需配置</li>
<li>生成静态页面  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li>
<li>生成完成后，使用命令启动本地服务  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>服务启动后，通过 <code>http://localhost:4000</code> 即可预览博客页面</li>
</ul>
<hr>
<h3 id="Hexo站点配置"><a href="#Hexo站点配置" class="headerlink" title="Hexo站点配置"></a><code>Hexo</code>站点配置</h3><ul>
<li>按照<code>hexo</code>的配置文档，填写好<code>#site</code>配置块下的站点信息<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title:                    <span class="comment">#站点名称</span></span><br><span class="line">subtitle：<span class="string">&#x27;&#x27;</span>              <span class="comment">#副标题</span></span><br><span class="line">description: <span class="string">&#x27;&#x27;</span>           <span class="comment">#介绍</span></span><br><span class="line">keywords:                 <span class="comment">#关键字</span></span><br><span class="line">anthor:                   <span class="comment">#站点作者 </span></span><br><span class="line">language:  Zh-CN          <span class="comment">#站点语言</span></span><br><span class="line">timezone: <span class="string">&#x27;Asia/Shanghai&#x27;</span> <span class="comment">#时区</span></span><br></pre></td></tr></table></figure></li>
<li>再修改<code># Deployment</code>配置块的<code>deploy</code>参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: &#x27;git&#x27;</span><br><span class="line">	repository： git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">	branch: master #分支名由你的github仓库默认分支决定</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="Hexo发布服务"><a href="#Hexo发布服务" class="headerlink" title="Hexo发布服务"></a><code>Hexo</code>发布服务</h3><ul>
<li>安装<code>hexo-deployer-git</code>插件  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>模块安装完成之后需要修改</li>
<li>利用<code>Hexo d</code>直接上传到<code>github</code></li>
<li>打开<code>&lt;username&gt;.github.io</code>即可</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>scoop包管理器简单用法</title>
    <url>/blog/224013425.html</url>
    <content><![CDATA[<h2 id="scoop安装"><a href="#scoop安装" class="headerlink" title="scoop安装"></a>scoop安装</h2><h3 id="步骤-1：在-PowerShell-中打开远程权限"><a href="#步骤-1：在-PowerShell-中打开远程权限" class="headerlink" title="步骤 1：在 PowerShell 中打开远程权限"></a><strong>步骤 1：在 PowerShell 中打开远程权限</strong></h3>  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<h3 id="步骤-2：自定义-Scoop-安装目录"><a href="#步骤-2：自定义-Scoop-安装目录" class="headerlink" title="步骤 2：自定义 Scoop 安装目录"></a><strong>步骤 2：自定义 Scoop 安装目录</strong></h3>  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> get.scoop.sh <span class="literal">-outfile</span> <span class="string">&#x27;install.ps1&#x27;</span></span><br><span class="line">.\install.ps1 <span class="literal">-ScoopDir</span> <span class="string">&#x27;Scoop_Path&#x27;</span> <span class="literal">-ScoopGlobalDir</span> <span class="string">&#x27;GlobalScoop_Path&#x27;</span> <span class="literal">-Proxy</span> <span class="string">&#x27;http://&lt;ip:port&gt;&#x27;</span></span><br><span class="line"><span class="comment"># 如</span></span><br><span class="line"><span class="comment"># .\install.ps1 -ScoopDir &#x27;C:\Scoop&#x27; -ScoopGlobalDir &#x27;C:\Program Files&#x27; -NoProxy</span></span><br></pre></td></tr></table></figure>


<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">.\install.ps1 <span class="literal">-ScoopDir</span> <span class="string">&#x27;D:\Scoop&#x27;</span> <span class="literal">-ScoopGlobalDir</span> <span class="string">&#x27;D:\Scoop\Program Files&#x27;</span> <span class="literal">-NoProxy</span></span><br></pre></td></tr></table></figure>

<p> <strong>Scoop</strong> 将默认把所有用户安装的 App 和 <strong>Scoop</strong> 本身置于<code>C:\Users\user_name\scoop</code></p>
<p>​</p>
<h3 id="步骤-3：更新-Scoop及scoop-buckert"><a href="#步骤-3：更新-Scoop及scoop-buckert" class="headerlink" title="步骤 3：更新 Scoop及scoop buckert"></a><strong>步骤 3：更新 Scoop及scoop buckert</strong></h3>  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop update</span><br></pre></td></tr></table></figure>

<h3 id="步骤-4：设置scoop代理"><a href="#步骤-4：设置scoop代理" class="headerlink" title="步骤 4：设置scoop代理"></a><strong>步骤 4：设置scoop代理</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop config proxy [<span class="type">ip</span>:<span class="type">port</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Scoop基础操作"><a href="#Scoop基础操作" class="headerlink" title="Scoop基础操作"></a><strong>Scoop基础操作</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保持当前版本</span></span><br><span class="line">scoop hold [<span class="type">package</span> <span class="type">name</span>]</span><br><span class="line"><span class="comment">#删除软件</span></span><br><span class="line">scoop uninstall [<span class="type">package</span> <span class="type">name</span>]</span><br><span class="line"><span class="comment">#更新某个软件</span></span><br><span class="line">scoop update [<span class="type">package</span> <span class="type">name</span>]</span><br><span class="line"><span class="comment">#指定版本号安装</span></span><br><span class="line">scoop install [<span class="type">package</span> <span class="type">name</span>]<span class="selector-tag">@</span>[<span class="type">build</span> <span class="type">number</span>]</span><br><span class="line"><span class="comment">#指定仓库安装</span></span><br><span class="line">scoop install [<span class="type">bucket</span> <span class="type">name</span>]/[<span class="type">package</span> <span class="type">name</span>]</span><br><span class="line"><span class="comment">#查看已安装软件</span></span><br><span class="line">scoop list</span><br><span class="line"><span class="comment">#查看待升级软件</span></span><br><span class="line">scoop status</span><br><span class="line"><span class="comment">#添加额外源</span></span><br><span class="line">scoop bucket add extras</span><br><span class="line"><span class="comment">#常用软件</span></span><br><span class="line">scoop bucket add dorado https://github.com/h404bi/dorado</span><br><span class="line"><span class="comment">#常用软件</span></span><br><span class="line">scoop bucket add kkzzsh https://github.com/kkzzhizhou/scoop<span class="literal">-apps</span></span><br><span class="line"><span class="comment">#代理软件</span></span><br><span class="line">scoop bucket add v2raya https://github.com/v2rayA/v2raya<span class="literal">-scoop</span></span><br><span class="line"><span class="comment">#字体</span></span><br><span class="line">scoop bucket add fonts  https://github.com/matthewjberger/scoop<span class="literal">-nerd-fonts</span></span><br></pre></td></tr></table></figure>

<p>‍</p>
<p>‍</p>
<h3 id="系统重装后恢复"><a href="#系统重装后恢复" class="headerlink" title="系统重装后恢复"></a><strong>系统重装后恢复</strong></h3><blockquote>
<p>重装系统之后, 如果把原有的scoop文件夹粘贴回去user文件夹,然后在powershell中再次输入文章中的安装命令,会得到一个<strong>Scoop is already installed</strong>错误,要想正确恢复scoop,请按照以下步骤:</p>
</blockquote>
<ol>
<li><p>重装系统之前,先完整复制用户目录下的scoop文件夹到别的地方</p>
</li>
<li><p>重装系统之后,将scoop文件夹粘贴回去用户目录</p>
</li>
<li><p>在环境变量设置中,新建一个用户变量,名字为SCOOP,值为当前scoop文件夹的地址,即:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\xxxx\scoop</span><br></pre></td></tr></table></figure></li>
<li><p>允许脚本执行:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set-executionpolicy remotesigned -s currentuse</span><br></pre></td></tr></table></figure></li>
<li><p>双击用户变量中的path,新建一个路径,填入 :</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%SCOOP%\shims</span><br></pre></td></tr></table></figure></li>
<li><p>管理员权限powershell中运行:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scoop reset *</span><br></pre></td></tr></table></figure></li>
</ol>
<p>即可恢复所有软件的正常使用.</p>
<p>‍</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>Scoop</tag>
        <tag>Powershell</tag>
      </tags>
  </entry>
</search>
